//Using Memoization
/*
int helper(int ind,vector<int>  &height,vector<int> &dp,int k){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int minSteps=INT_MAX;
    for(int j=1;j<=k;j++){
        if(ind-j>=0){
            int jump=helper(ind-j,height,dp,k)+abs(height[ind]-height[ind-j]);
            minSteps=min(minSteps,jump);
        }
    }
    return dp[ind]=minSteps;
}
*/

//Using Tabulation
int helper(int n,vector<int>&height,vector<int>&dp,int k){
    dp[0]=0;
    for(int i=1;i<n;i++){
        int minSteps=INT_MAX;
        
        for(int j=1;j<=k;j++){
            if(i-j>=0){
                int jump=dp[i-j]+abs(height[i]-height[i-j]);
                minSteps=min(minSteps,jump);
            }
        }
        dp[i]=minSteps;
    }
    return dp[n-1];
}
int minimizeCost(int n, int k, vector<int> &height){
    //Using Memoization
    /*
    vector<int>dp(n+1,-1);
    return helper(n-1,height,dp,k);
    */

    //Using Tabulation
    vector<int>dp(n,-1);
    return helper(n,height,dp,k);
}
