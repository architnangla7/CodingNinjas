#include <bits/stdc++.h> 
//Using Recursion
/*
int f(int ind,vector<int> &nums){
    if(ind==0) return nums[ind];
    if(ind<0) return 0;
    int pick=nums[ind]+f(ind-2,nums);
    int notpick=0+f(ind-1,nums);
    return max(pick,notpick);
}
*/

//Using Memoization
/*
int f(int ind,vector<int> &nums,vector<int> &dp){
    if(ind==0) return nums[ind];
    if(ind<0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    
    int pick=nums[ind]+f(ind-2,nums,dp);
    int notpick=0+f(ind-1,nums,dp);

    return dp[ind]=max(pick,notpick);
}
*/

//Using Tabulation
int f(int n,vector<int> &nums,vector<int> &dp){
    dp[0]=nums[0];
    for(int i=1;i<n;i++){
        int pick=nums[i];
        if(i>1)
            pick+=dp[i-2];
        int notpick=0+dp[i-1];
        
        dp[i]=max(pick,notpick);
    }
    return dp[n-1];
}
int maximumNonAdjacentSum(vector<int> &nums){
    //Using Recursion
    /*
    int n=nums.size();
    f(n-1,nums);
    */

    //Using Memoization
    /*
    int n=nums.size();
    vector<int>dp(n,-1);
    return f(n-1,nums,dp);
    */

    //Using Tabulation
    /*
    int n=nums.size();
    vector<int>dp(n,-1);
    return f(n,nums,dp);
    */
    
    //Using Space Optimization
    int prev=nums[0];
    int prev2=0;
    int n=nums.size();
    for(int i=1;i<n;i++){
        int pick=nums[i];
        if(i>1)
        pick+=prev2;
        int notpick=0+prev;

        int curri=max(pick,notpick);
        prev2=prev;
        prev=curri;
    }
    return prev;
}
