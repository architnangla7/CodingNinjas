#include <bits/stdc++.h> 
int f(int ind,vector<int> &nums,vector<int> &dp)
{
    //Memoization
    /*
    if(ind==0) return nums[ind];
    if(ind<0) return 0;
    if(dp[ind]!=-1) return dp[ind];

    int pick=nums[ind]+f(ind-2,nums,dp);
    int npick=0+f(ind-1,nums,dp);
    return dp[ind]=max(pick,npick);
    */
}
int maximumNonAdjacentSum(vector<int> &nums){
    //Memoization
    /*
    int n=nums.size();
    vector<int> dp(n,-1);
    return f(n-1,nums,dp);
    */

    //Tabulation
    /*
    int n=nums.size();
    vector<int> dp(n,0);
    dp[0]=nums[0];
    for(int i=1;i<n;i++)
    {
        int take=nums[i];
        if(i>1){
            take=nums[i]+dp[i-2];
        }
        int ntake=0+dp[i-1];
        dp[i]=max(take,ntake);
    }
    return dp[n-1]; 
    */

    //Space Optimization
    int n=nums.size();
    int prev2=0;
    int prev1=nums[0];
    for(int i=1;i<n;i++)
    {
        int take=nums[i];
        if(i>1){
            take=nums[i]+prev2;
        }
        int ntake=0+prev1;
        int curri=max(take,ntake);
        prev2=prev1;
        prev1=curri;
    }
    return prev1;
}
