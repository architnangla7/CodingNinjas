#include <bits/stdc++.h> 
//Memoization
/*
int f(int ind,vector<int> &heights,vector<int> &dp)
{
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int left=f(ind-1,heights,dp)+abs(heights[ind]-heights[ind-1]);
    int right=INT_MAX;
    if(ind>1){
        right=f(ind-2,heights,dp)+abs(heights[ind]-heights[ind-2]);
    }
    return dp[ind]=min(left,right);
}
*/
int frogJump(int n, vector<int> &heights)
{
    //Memoization
    /*
    vector<int> dp(n+1,-1);
    return f(n-1,heights,dp);
    */

    //Tabulation
    /*
    vector<int> dp(n,0);
    dp[0]=0;
    for(int index=1;index<n;index++)
    {
        int right=INT_MAX;
        int left=dp[index-1]+abs(heights[index]-heights[index-1]);
        if(index>1)
        {
            right=dp[index-2]+abs(heights[index]-heights[index-2]);
        }
        dp[index]=min(left,right);
    }
    return dp[n-1];
    */

    //Space Optimization
    int prev1=0;
    int prev2=0;
    for(int index=1;index<n;index++)
    {
        int right=INT_MAX;
        int left=prev1+abs(heights[index]-heights[index-1]);
        if(index>1)
        {
            right=prev2+abs(heights[index]-heights[index-2]);
        }
        int curri=min(left,right);
        prev2=prev1;
        prev1=curri;
    }
    return prev1;

}
